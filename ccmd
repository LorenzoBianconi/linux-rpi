#!/bin/bash

BOOT_DIR=/media/boot
ROOT_DIR=/media/rootfs

usage() {
	exec echo "
Usage: ccmd [-cdh] -t <target> -j <threads>

   -t	Target. kernel, modules, install (default kernel)
   -j	# of threads (default 8)
   -c	clean project
   -d	default confuguration
   -h	print this help
"
}

compile_kernel() {
	KDIR=~/workspace/rpi-devel/linux-rpi
	TOOLS=~/workspace/rpi-devel/tools

	export ARCH=arm
	export CROSS_COMPILE=$TOOLS/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-

	rm -fr $KDIR/modules-dir && mkdir $KDIR/modules-dir
	[ $opt_clean -eq 1 ] && make -C $KDIR distclean
	[ $opt_def -eq 1 ] && make -C $KDIR bcm2709_defconfig
	make -C $KDIR menuconfig
	make -C $KDIR zImage modules dtbs V=99 -j$opt_treads
	make -C $KDIR INSTALL_MOD_PATH=$KDIR/modules-dir modules_install V=99 -j$opt_treads

	unset ARCH
	unset CROSS_COMPILE
}

compile_modules() {
	KDIR=~/workspace/rpi-devel/linux-rpi
	TOOLS=~/workspace/rpi-devel/tools

	export ARCH=arm
	export CROSS_COMPILE=$TOOLS/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-

	rm -fr $KDIR/modules-dir && mkdir $KDIR/modules-dir
	[ $opt_clean -eq 1 ] && make -C $KDIR distclean
	[ $opt_def -eq 1 ] && make -C $KDIR bcm2709_defconfig
	make -C $KDIR menuconfig
	make -C $KDIR modules V=99 -j$opt_treads
	make -C $KDIR INSTALL_MOD_PATH=$KDIR/modules-dir modules_install V=99 -j$opt_treads

	unset ARCH
	unset CROSS_COMPILE
}

install() {
	KDIR=~/workspace/rpi-devel/linux-rpi
	KERNEL=kernel7

	echo "Please select a device >"
	read -r 
	dev=$REPLY

	[ -d $BOOT_DIR ] || sudo mkdir $BOOT_DIR
	sudo mount /dev/${dev}1 $BOOT_DIR
	[ -d $ROOT_DIR ] || sudo mkdir $ROOT_DIR
	sudo mount /dev/${dev}2 $ROOT_DIR

	sudo $KDIR/scripts/mkknlimg $KDIR/arch/arm/boot/zImage $BOOT_DIR/$KERNEL.img
	sudo cp $KDIR/arch/arm/boot/dts/*.dtb $BOOT_DIR
	sudo cp $KDIR/arch/arm/boot/dts/overlays/*.dtb* $BOOT_DIR/overlays/
	sudo cp $KDIR/arch/arm/boot/dts/overlays/README $BOOT_DIR/overlays/
	sudo cp -r $KDIR/modules-dir/* $ROOT_DIR

	sudo umount $BOOT_DIR
	sudo umount $ROOT_DIR
}

# default values
opt_target=kernel
opt_treads=8
opt_clean=0
opt_def=0

while true; do
	case $1 in
	-t)
		opt_target=$2
		shift 2 ;;
	-j)
		opt_treads=$2
		shift 2 ;;
	-c)
		opt_clean=1
		shift 1 ;;
	-d)
		opt_def=1
		shift 1 ;;
	-h)
		usage
		;;
	*) 
		break
		;;
	esac
done

echo "=========================================="
echo "Target: $opt_target"
echo "Threads: $opt_treads"
[ $opt_def -eq 1 ] && echo "Default configuration"
[ $opt_clean -eq 1 ] && echo "Clean target"
echo "=========================================="

case $opt_target in 
	kernel) compile_kernel ;;
	modules) compile_modules ;;
	install) install ;;
	*) usage ;;
esac
